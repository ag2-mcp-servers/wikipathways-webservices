# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:15:16+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import Codes, Color, Format, GraphId, Ids

app = MCPProxy(
    title='WikiPathways Webservices',
    version='1.0',
    servers=[{'url': 'https://webservice.wikipathways.org'}],
)


@app.post(
    '/createPathway',
    description=""" createPathwayCreate a new pathway on the wiki with the given GPML code.<br>Note: To create/modify pathways via the web service, you need to have an account with web service write permissions. Please contact us to request write access for the web service. """,
    tags=['user_authentication_process'],
)
def post_create_pathway(
    gpml: str, auth: str = ..., username: str = ..., format: Optional[Format] = 'xml'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/findInteractions',
    description=""" findInteractionsFind interactions defined in WikiPathways pathways. """,
    tags=['pathway_search_functions'],
)
def get_find_interactions(query: str, format: Optional[Format] = 'xml'):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/findPathwaysByLiterature',
    description=""" findPathwaysByLiterature """,
    tags=['pathway_search_functions'],
)
def get_find_pathways_by_literature(query: str, format: Optional[Format] = 'xml'):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/findPathwaysByText',
    description=""" findPathwaysByText """,
    tags=['pathway_search_functions', 'organism_and_pathway_directory'],
)
def get_find_pathways_by_text(
    query: str, species: Optional[str] = None, format: Optional[Format] = 'xml'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/findPathwaysByXref',
    description=""" findPathwaysByXref """,
    tags=['curation_tag_management'],
)
def get_find_pathways_by_xref(
    ids: Ids, codes: Optional[Codes] = None, format: Optional[Format] = 'xml'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getColoredPathway',
    description=""" getColoredPathwayGet a colored image version of the pathway. """,
    tags=['pathway_management', 'pathway_search_functions'],
)
def get_get_colored_pathway(
    pw_id: str = Query(..., alias='pwId'),
    revision: str = ...,
    graph_id: GraphId = Query(..., alias='graphId'),
    color: Color = ...,
    file_type: str = Query(..., alias='fileType'),
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getCurationTagHistory',
    description=""" getCurationTagHistory """,
    tags=['pathway_management'],
)
def get_get_curation_tag_history(
    pw_id: str = Query(..., alias='pwId'),
    timestamp: Optional[str] = None,
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getCurationTags',
    description=""" getCurationTagsGet all curation tags for the given tag name. Use this method if you want to find all pathways that are tagged with a specific curation tag. """,
    tags=['pathway_management', 'pathway_search_functions', 'curation_tag_management'],
)
def get_get_curation_tags(
    pw_id: str = Query(..., alias='pwId'), format: Optional[Format] = 'xml'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getCurationTagsByName',
    description=""" getCurationTagsByNameGet all curation tags for the given tag name. Use this method if you want to find all pathways that are tagged with a specific curation tag. """,
    tags=['curation_tag_management'],
)
def get_get_curation_tags_by_name(
    tag_name: str = Query(..., alias='tagName'), format: Optional[Format] = 'xml'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getOntologyTermsByPathway',
    description=""" getOntologyTermsByPathway """,
    tags=['pathway_management'],
)
def get_get_ontology_terms_by_pathway(
    pw_id: str = Query(..., alias='pwId'), format: Optional[Format] = 'xml'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getPathway',
    description=""" getPathway """,
    tags=['pathway_management', 'curation_tag_management', 'ontology_management'],
)
def get_get_pathway(
    pw_id: str = Query(..., alias='pwId'),
    revision: Optional[int] = None,
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getPathwayAs',
    description=""" getPathwayAsDownload a pathway in the specified file format. """,
    tags=['pathway_management', 'curation_tag_management'],
)
def get_get_pathway_as(
    file_type: str = Query(..., alias='fileType'),
    pw_id: str = Query(..., alias='pwId'),
    revision: Optional[int] = None,
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getPathwayHistory',
    description=""" getPathwayHistoryGet the revision history of a pathway. """,
    tags=['pathway_management', 'curation_tag_management'],
)
def get_get_pathway_history(
    pw_id: str = Query(..., alias='pwId'),
    timestamp: str = ...,
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getPathwayInfo',
    description=""" getPathwayInfoGet some general info about the pathway, such as the name, species, without downloading the GPML. """,
    tags=['pathway_management'],
)
def get_get_pathway_info(
    pw_id: str = Query(..., alias='pwId'), format: Optional[Format] = 'xml'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getPathwaysByOntologyTerm',
    description=""" getPathwaysByOntologyTerm """,
    tags=['pathway_search_functions'],
)
def get_get_pathways_by_ontology_term(term: str, format: Optional[Format] = 'xml'):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getPathwaysByParentOntologyTerm',
    description=""" getPathwaysByParentOntologyTerm """,
    tags=['pathway_search_functions'],
)
def get_get_pathways_by_parent_ontology_term(
    term: str, format: Optional[Format] = 'xml'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getRecentChanges',
    description=""" getRecentChangesGet the recently changed pathways.<br>Note: the recent changes table only retains items for a limited time (2 months), so there is no guarantee that you will get all changes when the timestamp points to a date that is more than 2 months in the past. """,
    tags=['pathway_management', 'pathway_search_functions'],
)
def get_get_recent_changes(timestamp: str, format: Optional[Format] = 'xml'):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getUserByOrcid',
    description=""" getUserByOrcid """,
    tags=['user_authentication_process'],
)
def get_get_user_by_orcid(orcid: str, format: Optional[Format] = 'xml'):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getXrefList',
    description=""" getXrefList """,
    tags=['user_authentication_process'],
)
def get_get_xref_list(
    pw_id: str = Query(..., alias='pwId'),
    code: str = ...,
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listOrganisms',
    description=""" listOrganisms """,
    tags=['pathway_management', 'curation_tag_management', 'ontology_management'],
)
def get_list_organisms(format: Optional[Format] = 'xml'):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listPathways',
    description=""" listPathways """,
    tags=['organism_and_pathway_directory'],
)
def get_list_pathways(organism: Optional[str] = None, format: Optional[Format] = 'xml'):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/login',
    description=""" loginStart a logged in session, using an existing WikiPathways account. This function will return an authentication code that can be used to excecute methods that need authentication (e.g. updatePathway). """,
    tags=['user_authentication_process'],
)
def get_login(
    name: str, pass_: str = Query(..., alias='pass'), format: Optional[Format] = 'xml'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/removeCurationTag',
    description=""" removeCurationTagRemove a curation tag from a pathway. """,
    tags=['curation_tag_management', 'user_authentication_process'],
)
def get_remove_curation_tag(
    pw_id: str = Query(..., alias='pwId'),
    tag_name: str = Query(..., alias='tagName'),
    auth: str = ...,
    username: str = ...,
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/removeOntologyTag',
    description=""" removeOntologyTag """,
    tags=['pathway_management', 'user_authentication_process'],
)
def get_remove_ontology_tag(
    pw_id: str = Query(..., alias='pwId'),
    term_id: str = Query(..., alias='termId'),
    auth: str = ...,
    user: str = ...,
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/saveCurationTag',
    description=""" saveCurationTag """,
    tags=['curation_tag_management', 'user_authentication_process'],
)
def get_save_curation_tag(
    pw_id: str = Query(..., alias='pwId'),
    tag_name: str = Query(..., alias='tagName'),
    text: str = ...,
    revision: int = ...,
    auth: str = ...,
    username: str = ...,
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/saveOntologyTag',
    description=""" saveOntologyTag """,
    tags=[
        'pathway_management',
        'pathway_search_functions',
        'user_authentication_process',
    ],
)
def get_save_ontology_tag(
    pw_id: str = Query(..., alias='pwId'),
    term: str = ...,
    term_id: str = Query(..., alias='termId'),
    auth: str = ...,
    user: str = ...,
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/updatePathway',
    description=""" updatePathwayUpdate a pathway on the wiki with the given GPML code.<br>Note: To create/modify pathways via the web service, you need to have an account with web service write permissions. Please contact us to request write access for the web service. """,
    tags=['user_authentication_process'],
)
def get_update_pathway(
    pw_id: str = Query(..., alias='pwId'),
    description: str = ...,
    gpml: str = ...,
    revision: int = ...,
    auth: str = ...,
    username: str = ...,
    format: Optional[Format] = 'xml',
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
